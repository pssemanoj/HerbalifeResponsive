<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="PageResource1.Title" xml:space="preserve">
    <value>확인</value>
    <comment>_G43</comment>
  </data>
  <data name="ContinueShoppingResource1.Text" xml:space="preserve">
    <value>계속 쇼핑하기</value>
    <comment>_G44</comment>
  </data>
  <data name="PageHeaderEvents" xml:space="preserve">
    <value>행사티켓-주문 확인</value>
    <comment>_G45</comment>
  </data>
  <data name="lblOrderStatusResource1.Text" xml:space="preserve">
    <value>주문</value>
    <comment>_G46</comment>
  </data>
  <data name="PageHeaderProducts" xml:space="preserve">
    <value>제품 주문 내역 확인</value>
    <comment>_G47</comment>
  </data>
  <data name="OrderSummaryStaticText" xml:space="preserve">
    <value>주문내역</value>
    <comment>_G48</comment>
  </data>
  <data name="PrintThisButtonResource1.Text" xml:space="preserve">
    <value>페이지 인쇄하기</value>
    <comment>_G49</comment>
  </data>
  <data name="EventTicketsReturn" xml:space="preserve">
    <value>행사 카탈로그로 돌아가기</value>
    <comment>_G50</comment>
  </data>
  <data name="ProductCatalogReturn" xml:space="preserve">
    <value>제품 카탈로그로 돌아가기</value>
    <comment>_G51</comment>
  </data>
  <data name="lblOrderPlacedSuccessResource.Text" xml:space="preserve">
    <value>한국허벌라이프 제품 주문에 감사드립니다.</value>
    <comment>_G52</comment>
  </data>
  <data name="lblPBPMessageTitle" xml:space="preserve">
    <value />
    <comment>_G3440</comment>
  </data>
  <data name="PBPOrderSubmittedResource" xml:space="preserve">
    <value />
    <comment>_G3441</comment>
  </data>
  <data name="invoiceToolTip.Text" xml:space="preserve">
    <value>주문내역에서 인보이스 생성시, 쇼핑카트에 있는 제품들은 새로운 고객 인보이스로 불러오게 됩니다.</value>
    <comment>_GI251</comment>
  </data>
  <data name="lnkCreateInvoice.Text" xml:space="preserve">
    <value>해당 고객 주문에 대해 인보이스를 생성하시고 싶으시면 여기를 클릭하세요.</value>
    <comment>_GI250</comment>
  </data>
  <data name="ReturnToCustomerOrders" xml:space="preserve">
    <value>나의 고객 주문 검색으로 돌아가기</value>
    <comment>_D2716</comment>
  </data>
  <data name="CreateReceipt.Text" xml:space="preserve">
    <value>영수증 발행하기</value>
  </data>
  <data name="ForeignPPV.Text" xml:space="preserve">
    <value>미국령 밖에서 주문하신 건들에 대해서는 소매영수증을 본사로 제출해주셔야 합니다.</value>
  </data>
  <data name="Later.Text" xml:space="preserve">
    <value>나중에 하기</value>
  </data>
  <data name="lblReceiptLater.Text" xml:space="preserve">
    <value>새로운 영수증을 발행하시려면, 마이허벌라이프에 있는 "나의 고객"을 선택하신 후, 영수증 페이지에서 "새로운 영수증 발행하기"를 클릭하세요.</value>
  </data>
</root>