<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CreateHapOrderResource1.Text" xml:space="preserve">
    <value>Create New HAP Order</value>
  </data>
  <data name="DistributorNotification.Text" xml:space="preserve">
    <value />
  </data>
  <data name="EditHapExtraBullet.Text" xml:space="preserve">
    <value>&lt;div class="Wire_transfer_info" style="font-size:14px !important;"&gt;&lt;ul style="margin-bottom:0px;"&gt;
      &lt;li&gt;Your order total may change depending on factors like product availability or your discount level. Your order total will be confirmed when your monthly order is processed on your selected deadline date.&lt;/li&gt;
      &lt;/ul&gt;&lt;/div&gt;
    </value>
  </data>
  <data name="hapDescription.Text" xml:space="preserve">
    <value>The Herbalife Advantage Program (HAP) is a monthly automatic shipment program, providing Members with an effortless, flexible and convenient method for selecting and automatically shipping the products they use the most.</value>
  </data>
  <data name="hapDescriptionForDS.Text" xml:space="preserve">
    <value>The Herbalife Advantage Program (HAP) is a monthly automatic shipment program, providing Distributors with an effortless, flexible and convenient method for selecting and automatically shipping the products they use the most.</value>
  </data>
  <data name="hapFooterMessage.Text" xml:space="preserve">
    <value>If the deadline date falls on a holiday, your order will be processed on the following business day  .</value>
  </data>
  <data name="hapNotes.Text" xml:space="preserve">
    <value>The HAP Standing Order processes on the deadline date, you can make changes to your HAP standing order up to the deadline date before it processes.  The HAP Standing order is in place for 1 year, you can cancel at any time.  Also you will be notified 30 days prior to your HAP Standing order expiration date if you would like to renew.   At that time you can renew and extend it for another year.   This is your one stop landing page to handle all your Herbalife Advange Program needs.</value>
  </data>
  <data name="hapNotes2.Text" xml:space="preserve">
    <value>Create a new HAP Order, Modify Order Details, Update information ( Shipping, Payment and Expiry Date info), as well as you can cancel your HAP order at any time. &lt;a href="http://www.qa4.ws.myherbalife.com/content/en-US/pdf/ordering/HAP_FAQ_USEN.pdf" target="_blank"&gt;Learn More About HAP Orders&lt;/a&gt;</value>
  </data>
  <data name="hapNotes3.Text" xml:space="preserve">
    <value>Note: For both Personal  and Resale Hap orders there is a minimum limit of 100VP and for Personal a Max of 1000VP for your HAP orders.  For a Resale HAP order there are no MAX vol restrictions.</value>
  </data>
  <data name="lbCancelResource1.Text" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="lbCountryResource1.Text" xml:space="preserve">
    <value>Country</value>
  </data>
  <data name="lbEditResource1.Text" xml:space="preserve">
    <value>Edit</value>
  </data>
  <data name="lbExpDateResource1.Text" xml:space="preserve">
    <value>Exp. Date</value>
  </data>
  <data name="lbHAPResource1.Text" xml:space="preserve">
    <value>HAP Order ID</value>
  </data>
  <data name="lbStartDateResource1.Text" xml:space="preserve">
    <value>Start Date</value>
  </data>
  <data name="lbStatusResource1.Text" xml:space="preserve">
    <value>Status</value>
  </data>
  <data name="lbTypeResource1.Text" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="lbVolumeResource1.Text" xml:space="preserve">
    <value>Volume</value>
  </data>
  <data name="NotificationMessage.Text" xml:space="preserve">
    <value>Distributor’s country of address is not Canada; HAP Program is not available.</value>
  </data>
  <data name="NotificationRenewHAPOrder" xml:space="preserve">
    <value>Your HAP order expires on {0}. </value>
  </data>
  <data name="PageHeaderEvents" xml:space="preserve">
    <value>Order Products - HAP Orders</value>
  </data>
  <data name="PageHeaderProducts" xml:space="preserve">
    <value>Order Products - HAP Orders</value>
  </data>
  <data name="PageResource1.Title" xml:space="preserve">
    <value>My HAP Orders</value>
  </data>
  <data name="PersonalResource1.Text" xml:space="preserve">
    <value>Personal Consumption</value>
  </data>
  <data name="renewButton.Text" xml:space="preserve">
    <value>Click here to Opt In.</value>
  </data>
  <data name="ResaleResource1.Text" xml:space="preserve">
    <value>Resale</value>
  </data>
</root>