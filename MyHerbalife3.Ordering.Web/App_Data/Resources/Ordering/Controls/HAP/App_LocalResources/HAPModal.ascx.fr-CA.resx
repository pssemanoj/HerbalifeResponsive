<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CancelHapOrderResource1.Text" xml:space="preserve">
    <value>OK</value>
    <comment>_G3793</comment>
  </data>
  <data name="CancelResource1.Text" xml:space="preserve">
    <value>Annuler</value>
    <comment>_G3794</comment>
  </data>
  <data name="RenewHapOrderResource1.Text" xml:space="preserve">
    <value>Participer</value>
    <comment>_G3795</comment>
  </data>
  <data name="CancelModalDescription.Text" xml:space="preserve">
    <value>&lt;p&gt;: Annulant cette commande de HAP, vous ne la recevrez plus mensuellement. Vous pouvez à tout moment créer une nouvelle commande HAP en visitant la page Commandes HAP. Etes-vous sûr(e) de vouloir annuler votre commande HAP? &lt;/p&gt; &lt;p&gt;&lt;strong&gt;Veuillez attendre quelques minutes afin que la mise à jour de votre commande PAH soit effectuée.&lt;/strong&gt;&lt;/p&gt;</value>
  </data>
  <data name="RenewModalDescription.Text" xml:space="preserve">
    <value>&lt;p&gt;By choosing to Opt In, you will remain in the Herbalife Advantage Program.  We will continue to process your HAP Standing Order each month on your designated deadline date and ship your order within 4 days after payment has been processed.&lt;/p&gt;
    &lt;p&gt;You may change your HAP order or cancel the HAP program at any time prior to or on your next deadline date on MyHerbalife.com in the HAP orders section or contact Member Services at 866-622-1222.&lt;/p&gt;</value>
  </data>
  <data name="EditModalDescription.Text" xml:space="preserve">
    <value>&lt;p&gt;Le mode de paiement sur votre commande PAH actuelle est préenregistré avec le Service de Prélèvement Automatique (SPA).&lt;/p&gt;
      &lt;div class="Wire_transfer_info" style="font-size:14px !important;"&gt;&lt;ul&gt;
      &lt;li&gt;Si vous souhaitez continuer à faire des modifications en ligne sur votre commande mensuelle PAH, veuillez modifier votre mode de paiement pour une carte de crédit.&lt;/li&gt;
      &lt;li&gt;Si vous souhaitez garder le mode de paiement déjà préenregistré (SPA), veuillez nous contacter par téléphone au Bureau de Service aux Membres au 1-866-622-122, afin de mettre à jour votre commande.&lt;/li&gt;
      &lt;/ul&gt;&lt;/div&gt;</value>
  </data>
  <data name="EditHapOrderResource1.Text" xml:space="preserve">
    <value>Continue</value>
  </data>
  <data name="CancelRenewResource1.Text" xml:space="preserve">
    <value>Fermer</value>
  </data>
</root>