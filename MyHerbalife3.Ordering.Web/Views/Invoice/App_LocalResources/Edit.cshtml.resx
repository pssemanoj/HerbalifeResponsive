<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="add" xml:space="preserve">
    <value>Add</value>
  </data>
  <data name="addSavedCart" xml:space="preserve">
    <value>Add Saved Cart</value>
  </data>
  <data name="areaCode" xml:space="preserve">
    <value>Area Code</value>
  </data>
  <data name="browseContacts" xml:space="preserve">
    <value>Browse Contacts</value>
  </data>
  <data name="browseProducts" xml:space="preserve">
    <value>Browse Products</value>
  </data>
  <data name="cancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="change" xml:space="preserve">
    <value>Change</value>
  </data>
  <data name="city" xml:space="preserve">
    <value>City</value>
  </data>
  <data name="continue" xml:space="preserve">
    <value>Continue</value>
  </data>
  <data name="customer" xml:space="preserve">
    <value>Customer</value>
  </data>
  <data name="date" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="discount" xml:space="preserve">
    <value>Discount</value>
  </data>
  <data name="email" xml:space="preserve">
    <value>Email Address</value>
  </data>
  <data name="ext" xml:space="preserve">
    <value>Ext</value>
  </data>
  <data name="fee" xml:space="preserve">
    <value>Handing Fee</value>
  </data>
  <data name="firstName" xml:space="preserve">
    <value>First Name</value>
  </data>
  <data name="handling" xml:space="preserve">
    <value>Handling</value>
  </data>
  <data name="individualProducts" xml:space="preserve">
    <value>Add Individual Products</value>
  </data>
  <data name="instructions" xml:space="preserve">
    <value>Complete the fields below, then click the Continue button to view your invoice.</value>
  </data>
  <data name="invoiceInformation" xml:space="preserve">
    <value>Invoice Information</value>
  </data>
  <data name="invoiceMessage" xml:space="preserve">
    <value>This invoice will not adjust any credit card charges that are processed for orders made on your website. For those orders, please be sure the invoice you create reflects exact charges as paid.</value>
  </data>
  <data name="invoiceType" xml:space="preserve">
    <value>Invoice Type</value>
  </data>
  <data name="lastName" xml:space="preserve">
    <value>Last Name</value>
  </data>
  <data name="member" xml:space="preserve">
    <value>Member</value>
  </data>
  <data name="memberInformation" xml:space="preserve">
    <value>Member Information</value>
  </data>
  <data name="note" xml:space="preserve">
    <value>Note:</value>
  </data>
  <data name="notes" xml:space="preserve">
    <value>Notes</value>
  </data>
  <data name="or" xml:space="preserve">
    <value>or</value>
  </data>
  <data name="orEnter" xml:space="preserve">
    <value>or enter information below</value>
  </data>
  <data name="phone" xml:space="preserve">
    <value>Phone Number</value>
  </data>
  <data name="phoneNumber" xml:space="preserve">
    <value>Phone Number</value>
  </data>
  <data name="productDescription" xml:space="preserve">
    <value>Product Descrption</value>
  </data>
  <data name="productInformation" xml:space="preserve">
    <value>Product Information</value>
  </data>
  <data name="ProductNameColumnTitle" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="profit" xml:space="preserve">
    <value>Estimated profit</value>
  </data>
  <data name="qty" xml:space="preserve">
    <value>Qty</value>
  </data>
  <data name="QuantityColumnTitle" xml:space="preserve">
    <value>Quantity</value>
  </data>
  <data name="retailPrice" xml:space="preserve">
    <value>Suggested Retail Price</value>
  </data>
  <data name="sku" xml:space="preserve">
    <value>SKU</value>
  </data>
  <data name="SkuColumnTitle" xml:space="preserve">
    <value>SKU</value>
  </data>
  <data name="state" xml:space="preserve">
    <value>State</value>
  </data>
  <data name="status" xml:space="preserve">
    <value>Status</value>
  </data>
  <data name="streetAddress" xml:space="preserve">
    <value>Street Address</value>
  </data>
  <data name="tax" xml:space="preserve">
    <value>Tax</value>
  </data>
  <data name="taxBased" xml:space="preserve">
    <value>My Tax Based On</value>
  </data>
  <data name="title" xml:space="preserve">
    <value>Edit Invoice</value>
  </data>
  <data name="totalDue" xml:space="preserve">
    <value>Total Due</value>
  </data>
  <data name="totalPrice" xml:space="preserve">
    <value>Total Price</value>
  </data>
  <data name="totalVP" xml:space="preserve">
    <value>Total VP</value>
  </data>
  <data name="typeSearch" xml:space="preserve">
    <value>Type product name or SKU</value>
  </data>
  <data name="update" xml:space="preserve">
    <value>Price Invoice</value>
  </data>
  <data name="yourCost" xml:space="preserve">
    <value>Your Cost</value>
  </data>
  <data name="yourPrice" xml:space="preserve">
    <value>Your Price</value>
  </data>
  <data name="zipCode" xml:space="preserve">
    <value>Postal Code</value>
  </data>
  <data name="RetailPriceColumnTitle" xml:space="preserve">
    <value>Suggested Retail Price</value>
  </data>
  <data name="TotalPriceColumnTitle" xml:space="preserve">
    <value>Total Price</value>
  </data>
  <data name="DeleteColumnTitle" xml:space="preserve">
    <value />
  </data>
  <data name="HandlingFee" xml:space="preserve">
    <value>Shipping &amp; Handling Fee</value>
  </data>
  <data name="Subtotal" xml:space="preserve">
    <value>Subtotal</value>
  </data>
  <data name="VPColumnTitle" xml:space="preserve">
    <value>Total VP</value>
  </data>
  <data name="YourPriceColumnTitle" xml:space="preserve">
    <value>Your Price</value>
  </data>
  <data name="InvoiceShipToAddress" xml:space="preserve">
    <value>Invoice Ship-To Address</value>
  </data>
  <data name="createTitle" xml:space="preserve">
    <value>Create New Invoice</value>
  </data>
  <data name="ChangeAddressLink" xml:space="preserve">
    <value>Change</value>
  </data>
  <data name="currencySign" xml:space="preserve">
    <value>$</value>
  </data>
  <data name="percentage" xml:space="preserve">
    <value>%</value>
  </data>
  <data name="collapse" xml:space="preserve">
    <value>Collapse</value>
  </data>
  <data name="reqFirstName" xml:space="preserve">
    <value>First Name is required</value>
  </data>
  <data name="reqInvoiceDate" xml:space="preserve">
    <value>Date is reqruired</value>
  </data>
  <data name="reqProducts" xml:space="preserve">
    <value>Products required</value>
  </data>
  <data name="reqStatus" xml:space="preserve">
    <value>Status is required</value>
  </data>
  <data name="show" xml:space="preserve">
    <value>Show</value>
  </data>
  <data name="EarnBase" xml:space="preserve">
    <value>Earn Base</value>
  </data>
  <data name="faceToface" xml:space="preserve">
    <value>Check here if this sale was made in person</value>
  </data>
  <data name="notesMessage" xml:space="preserve">
    <value>“Notes entered here will print on invoice”</value>
  </data>
  <data name="select" xml:space="preserve">
    <value>Select</value>
  </data>
  <data name="additionalMemberInfo" xml:space="preserve">
    <value>Additional Member Information</value>
  </data>
  <data name="backOrderMsg" xml:space="preserve">
    <value>Some products in the saved cart are no longer available and will not be included in your customer invoice</value>
  </data>
  <data name="moreMemberInfo" xml:space="preserve">
    <value>More Member Information</value>
  </data>
  <data name="newProductPriceDiffersMsg" xml:space="preserve">
    <value>Product prices on this invoice may not match the order. Prices may have changed since order {0} was created</value>
  </data>
  <data name="otherMemberInfo" xml:space="preserve">
    <value>Other Member Information</value>
  </data>
  <data name="savedCartAddressMsg" xml:space="preserve">
    <value>Please review your address for accuracy. If this is correct, please click continue</value>
  </data>
  <data name="savedCartNameMsg" xml:space="preserve">
    <value>You currently have items in your cart. If you would like to save your current cart for later use, enter a name below.&lt;/br&gt;
"Or"&lt;/br&gt;
If you do not save your cart, the items in your cart will be discarded</value>
  </data>
  <data name="priceInfo" xml:space="preserve">
    <value>Click "Price Invoice" whenever you make changes to have the totals reflect accurately.</value>
  </data>
  <data name="returnToInvoice" xml:space="preserve">
    <value>Return to Invoice</value>
  </data>
  <data name="userGuide" xml:space="preserve">
    <value>See User Guide</value>
  </data>
  <data name="resetToDefault" xml:space="preserve">
    <value>Reset to Previous Values</value>
  </data>
  <data name="Save" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="info1" xml:space="preserve">
    <value>Test</value>
  </data>
  <data name="info2" xml:space="preserve">
    <value>Test</value>
  </data>
  <data name="Conformation" xml:space="preserve">
    <value>Test</value>
  </data>
</root>